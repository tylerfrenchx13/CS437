Tyler French, Brody Downs, Nicholas Petitmermet
CS 437
Project 1
10/19/2019

////////////////////////
//Statistics of System//
////////////////////////
(number of documents, index size pre/post stemming, stop word removal, etc.)

///////////////////////////
//Text Processing Details//
///////////////////////////
(which tokenizer you used, any modifications make, stemmer/lemmatizer used, etc.).

////////////////////////////
//Query Suggestion Details//
////////////////////////////
(which data structures did you used to ease the retrieval of suggestions, etc.).

/////////////////////////////
//Relevance Ranking Details//
/////////////////////////////
For relevance ranking, we split the ranking into a find candidates method and a ranking method. The first finds if both query words 
show up in the index for the document and proceeds to add them to a list. For each query word after the first, I used some help from
Stack Overflow for how to only keep elements that show up in both lists to get only candidates that had all the words. For ranking, I simply
did the formula that was given. To get the values, we used several documents, the Term Doc matrix was used for candidacy and to see how many
documents a word shows up in. We also created a doc term matrix to just get the document to see total tokens and how many times it shows up.
We returned a dict of doc number to its relevance ranking as a result.

//////////////////////////////
//Snippet Generation Details//
//////////////////////////////
(data structures that eased the process, libraries used, etc.)

//////////////
//Discussion//
//////////////
